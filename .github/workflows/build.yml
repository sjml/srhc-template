name: Build and Deploy

on:
  push

jobs:
  build:
    runs-on: ubuntu-24.04

    steps:
    - name: Install Dependencies
      uses: awalsh128/cache-apt-pkgs-action@v1
      with:
        packages: librsvg2-bin imagemagick ghostscript calibre
        version: 1.0
        execute_install_scripts: true
    - uses: denoland/setup-deno@v2
      name: "Install Deno (latest v2)"
      with:
        deno-version: v2.x
    - uses: pandoc/actions/setup@main
      name: Install Pandoc (latest)
    - name: Set Tool Path
      run: |
        mkdir -p $HOME/.local/bin
        echo "$HOME/.local/bin" >> $GITHUB_PATH
    - name: Install Tectonic (latest) and EPUBCheck (latest)
      run: |
        TECTONIC_VERSION=$(gh release list --repo tectonic-typesetting/tectonic --limit 1 --exclude-pre-releases --json tagName | jq -r '.[0].tagName' | sed -nr 's/.*@(.*)/\1/p')
        wget https://github.com/tectonic-typesetting/tectonic/releases/download/tectonic%40${TECTONIC_VERSION}/tectonic-${TECTONIC_VERSION}-x86_64-unknown-linux-gnu.tar.gz
        tar xzf tectonic-${TECTONIC_VERSION}-x86_64-unknown-linux-gnu.tar.gz
        mv tectonic $HOME/.local/bin

        EPUBCHECK_VERSION=$(gh release list --repo w3c/epubcheck --limit 1 --exclude-pre-releases --json tagName | jq -r '.[0].tagName' | cut -c2-)
        wget https://github.com/w3c/epubcheck/releases/download/v${EPUBCHECK_VERSION}/epubcheck-${EPUBCHECK_VERSION}.zip
        unzip epubcheck-${EPUBCHECK_VERSION}.zip
        mv epubcheck-${EPUBCHECK_VERSION} $HOME/.local/bin
        printf "#!/bin/bash\njava -jar $HOME/.local/bin/epubcheck-${EPUBCHECK_VERSION}/epubcheck.jar \"\$@\"" > $HOME/.local/bin/epubcheck
        chmod +x $HOME/.local/bin/epubcheck
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - uses: actions/checkout@v4
      name: Checkout Source Code
    - name: Setup Project
      run: |
        deno install
    - name: Build Site and Books
      run: |
        ./src/buildFullDist.sh
    - name: Get Short Git Rev
      run: echo "GIT_SHA_SHORT=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
    - uses: actions/upload-artifact@v4
      name: Upload Site Artifact
      with:
        name: srhc-demo-site-${{ env.GIT_SHA_SHORT }}
        path: _site
    - uses: actions/upload-artifact@v4
      name: Upload Books Artifact
      with:
        name: srhc-demo-books-${{ env.GIT_SHA_SHORT }}
        path: static/downloads
    - name: Deploy to Remote
      run: |
        SSH_PATH="$HOME/.ssh"
        mkdir -p "$SSH_PATH"
        echo "$DEPLOY_KEY" > "$SSH_PATH/deploy_key"
        chmod 600 "$SSH_PATH/deploy_key"
        rsync -e "ssh -i $SSH_PATH/deploy_key -o StrictHostKeyChecking=no" -avz --delete-after --exclude=".*" ./_site/ "$DEPLOY_PATH"
        rm -rf $SSH_PATH
      env:
        DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }}
        DEPLOY_PATH: ${{ secrets.DEPLOY_PATH }}
